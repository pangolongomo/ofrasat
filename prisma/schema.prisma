// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(EDITOR)
  password      String?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business models
enum UserRole {
  SUPERADMIN
  ADMIN
  EDITOR
}

enum BranchType {
  CONSULTING
  FINANCE
  COMMUNICATION
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Branch {
  id          String     @id @default(cuid())
  name        String     @unique
  type        BranchType @unique
  description String?    @db.Text
  slug        String     @unique
  articles    Article[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Article {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  excerpt     String?       @db.Text
  content     String        @db.Text
  featuredImage String?
  status      ArticleStatus @default(DRAFT)
  publishedAt DateTime?
  branchId    String
  authorId    String
  tags        Tag[]
  branch      Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  author      User          @relation(fields: [authorId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([status, publishedAt])
  @@index([branchId])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  articles Article[]
}

model CompanyInfo {
  id          String   @id @default(cuid())
  mission     String   @db.Text
  vision      String   @db.Text
  values      String   @db.Text
  address     String?
  phone       String?
  email       String?
  website     String?
  socialLinks Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  icon        String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([order])
}